import { AssetManager } from "../AssetManager";
import { IAsset } from "../IAsset";
import { IAssetLoader } from "./IAssetLoader";


export class JSONAsset implements IAsset{
    public readonly name: string;
    public readonly data: JSON3D;
    public constructor(name:string , data:JSON3D){
        this.name = name;
        this.data = data;
    }
}

export class JSONAssetLoader implements IAssetLoader{

    public get supportedExtensions(): string[] {
        return ["json"];
    }
    public LoadAsset(assetName: string): void {
        var rawFile = new XMLHttpRequest();
        rawFile.overrideMimeType("application/json");
        rawFile.open("GET", assetName, true);
        rawFile.onreadystatechange = function() {
            if (rawFile.readyState === 4) {
                
                JSONAssetLoader.onload(assetName,rawFile.responseText);

            }
        }
        rawFile.send(null);

    }

    private static onload(assetName:string ,rawData : string ):void{
        var JsonAsset : JSON3D =  JSON.parse(rawData ) ;
        var asset = new JSONAsset(assetName,JsonAsset);
        AssetManager.onAssetLoaded(asset);
    }
}

// Generated by https://quicktype.io
// To change quicktype's target language, run command:
//   "Set quicktype target language"

export interface JSON3D {
    rootnode:   Rootnode;
    flags:      number;
    meshes:     Mesh[];
    materials:  Material[];
    animations: Animation[];
    lights:     Light[];
    cameras:    Camera[];
}

export interface Animation {
    name:           string;
    tickspersecond: number;
    duration:       number;
    channels:       Channel[];
}

export interface Channel {
    name:         string;
    prestate:     number;
    poststate:    number;
    positionkeys: Array<Array<number[] | number>>;
    rotationkeys: Array<Array<number[] | number>>;
    scalingkeys:  Array<Array<number[] | number>>;
}

export interface Camera {
    name:          string;
    aspect:        number;
    clipplanefar:  number;
    clipplanenear: number;
    horizontalfov: number;
    up:            number[];
    lookat:        number[];
}

export interface Light {
    name:                 string;
    type:                 number;
    attenuationconstant:  number;
    attenuationlinear:    number;
    attenuationquadratic: number;
    diffusecolor:         number[];
    specularcolor:        number[];
    ambientcolor:         number[];
    position:             number[];
}

export interface Material {
    properties: Property[];
}

export interface Property {
    key:      string;
    semantic: number;
    index:    number;
    type:     number;
    value:    number[] | number | string;
}

export interface Mesh {
    name:            string;
    materialindex:   number;
    primitivetypes:  number;
    vertices:        number[];
    normals:         number[];
    tangents:        Array<number | BitangentEnum>;
    bitangents:      Array<number | BitangentEnum>;
    numuvcomponents: number[];
    texturecoords:   Array<number[]>;
    faces:           Array<number[]>;
}

export enum BitangentEnum {
    NaN = "NaN",
}


export type NodeElement = Rootnode | RootnodeChild;
export interface Rootnode {
    name:           string;
    transformation: number[];
    children:       RootnodeChild[];
}

export interface RootnodeChild {
    name:           string;
    transformation: number[];
    meshes?:        number[];
    children?:      RootnodeChild[];
}

